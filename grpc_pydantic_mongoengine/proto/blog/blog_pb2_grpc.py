# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from grpc_pydantic_mongoengine.proto.base import base_pb2 as grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2
from grpc_pydantic_mongoengine.proto.blog import blog_pb2 as grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2


class BlogStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/grpc_pydantic_mongoengine.blog.Blog/Create',
                request_serializer=grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.CreateBlogData.SerializeToString,
                response_deserializer=grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.BlogData.FromString,
                )
        self.GetByUUID = channel.unary_unary(
                '/grpc_pydantic_mongoengine.blog.Blog/GetByUUID',
                request_serializer=grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.GetByUUIDMsg.SerializeToString,
                response_deserializer=grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.BlogData.FromString,
                )
        self.Get = channel.unary_unary(
                '/grpc_pydantic_mongoengine.blog.Blog/Get',
                request_serializer=grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.GetQuery.SerializeToString,
                response_deserializer=grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.BlogData.FromString,
                )
        self.GetMulti = channel.unary_unary(
                '/grpc_pydantic_mongoengine.blog.Blog/GetMulti',
                request_serializer=grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.MultiGetQuery.SerializeToString,
                response_deserializer=grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.MultiBlogData.FromString,
                )
        self.Update = channel.unary_unary(
                '/grpc_pydantic_mongoengine.blog.Blog/Update',
                request_serializer=grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.UpdateBlogQuery.SerializeToString,
                response_deserializer=grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.BlogData.FromString,
                )
        self.Delete = channel.unary_unary(
                '/grpc_pydantic_mongoengine.blog.Blog/Delete',
                request_serializer=grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.GetQuery.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.DeleteMulti = channel.unary_unary(
                '/grpc_pydantic_mongoengine.blog.Blog/DeleteMulti',
                request_serializer=grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.MultiGetQuery.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.Count = channel.unary_unary(
                '/grpc_pydantic_mongoengine.blog.Blog/Count',
                request_serializer=grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.MultiGetQuery.SerializeToString,
                response_deserializer=grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.CountMsg.FromString,
                )


class BlogServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetByUUID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMulti(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMulti(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Count(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BlogServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.CreateBlogData.FromString,
                    response_serializer=grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.BlogData.SerializeToString,
            ),
            'GetByUUID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetByUUID,
                    request_deserializer=grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.GetByUUIDMsg.FromString,
                    response_serializer=grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.BlogData.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.GetQuery.FromString,
                    response_serializer=grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.BlogData.SerializeToString,
            ),
            'GetMulti': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMulti,
                    request_deserializer=grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.MultiGetQuery.FromString,
                    response_serializer=grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.MultiBlogData.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.UpdateBlogQuery.FromString,
                    response_serializer=grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.BlogData.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.GetQuery.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'DeleteMulti': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMulti,
                    request_deserializer=grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.MultiGetQuery.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Count': grpc.unary_unary_rpc_method_handler(
                    servicer.Count,
                    request_deserializer=grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.MultiGetQuery.FromString,
                    response_serializer=grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.CountMsg.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_pydantic_mongoengine.blog.Blog', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Blog(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_pydantic_mongoengine.blog.Blog/Create',
            grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.CreateBlogData.SerializeToString,
            grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.BlogData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetByUUID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_pydantic_mongoengine.blog.Blog/GetByUUID',
            grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.GetByUUIDMsg.SerializeToString,
            grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.BlogData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_pydantic_mongoengine.blog.Blog/Get',
            grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.GetQuery.SerializeToString,
            grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.BlogData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMulti(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_pydantic_mongoengine.blog.Blog/GetMulti',
            grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.MultiGetQuery.SerializeToString,
            grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.MultiBlogData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_pydantic_mongoengine.blog.Blog/Update',
            grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.UpdateBlogQuery.SerializeToString,
            grpc__pydantic__mongoengine_dot_proto_dot_blog_dot_blog__pb2.BlogData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_pydantic_mongoengine.blog.Blog/Delete',
            grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.GetQuery.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteMulti(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_pydantic_mongoengine.blog.Blog/DeleteMulti',
            grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.MultiGetQuery.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Count(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_pydantic_mongoengine.blog.Blog/Count',
            grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.MultiGetQuery.SerializeToString,
            grpc__pydantic__mongoengine_dot_proto_dot_base_dot_base__pb2.CountMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
